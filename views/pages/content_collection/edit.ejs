<!-- Content Edit Form -->
<div class="container mx-auto p-6 max-w-6xl">
    <div class="flex justify-between items-center mb-8">
        <h2 class="text-2xl font-bold text-gray-800">Edit Content</h2>
        <a href="/content_collection" class="text-indigo-600 hover:text-indigo-900 font-medium">Back to List</a>
    </div>

    <form id="contentForm" class="space-y-8" enctype="multipart/form-data">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Left Column -->
            <div class="space-y-6">
                <!-- Video Upload -->
                <div class="bg-white rounded-lg shadow p-6 space-y-4">
                    <h3 class="text-lg font-medium text-gray-900">Video</h3>
                    <div class="flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg">
                        <div class="space-y-1 text-center">
                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none"
                                viewBox="0 0 48 48">
                                <path
                                    d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4-4m4-4h8m-4-4v8m-12 4h.02"
                                    stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                            <div class="flex text-sm text-gray-600">
                                <label for="video"
                                    class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500">
                                    <span>Change video</span>
                                    <input id="video" name="video" type="file" accept="video/*" class="sr-only">
                                </label>
                            </div>
                            <p class="text-xs text-gray-500">MP4, MOV up to 500MB</p>
                        </div>
                    </div>
                    <div id="videoPreview">
                        <div class="relative">
                            <video id="previewPlayer" src="<%= content.video_path %>" controls
                                class="w-full rounded-lg shadow-sm">
                                Your browser does not support the video tag.
                            </video>
                            <div class="absolute bottom-4 left-4 right-4 bg-black bg-opacity-50 text-white px-4 py-2 rounded-lg text-sm"
                                id="videoInfo">
                                Duration: <span id="videoDuration">0:00</span> | Resolution: <span
                                    id="videoResolution">0x0</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Basic Information -->
                <div class="bg-white rounded-lg shadow p-6 space-y-4">
                    <h3 class="text-lg font-medium text-gray-900">Basic Information</h3>
                    <div class="space-y-4">
                        <div>
                            <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
                            <input type="text" id="title" name="title" value="<%= content.title %>" required
                                class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>
                        <div>
                            <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                            <select id="category" name="category" required
                                class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                <option value="">Select a category</option>
                                <option value="tutorial" <%=content.category==='tutorial' ? 'selected' : '' %>>Tutorial
                                </option>
                                <option value="entertainment" <%=content.category==='entertainment' ? 'selected' : '' %>
                                    >Entertainment</option>
                                <option value="education" <%=content.category==='education' ? 'selected' : '' %>
                                    >Education</option>
                                <option value="music" <%=content.category==='music' ? 'selected' : '' %>>Music</option>
                                <option value="gaming" <%=content.category==='gaming' ? 'selected' : '' %>>Gaming
                                </option>
                                <option value="vlog" <%=content.category==='vlog' ? 'selected' : '' %>>Vlog</option>
                                <option value="other" <%=content.category==='other' ? 'selected' : '' %>>Other</option>
                            </select>
                        </div>
                        <div>
                            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                            <textarea id="description" name="description" rows="4" required
                                class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"><%= content.description %></textarea>
                        </div>
                    </div>
                </div>

                <!-- Tags and Hashtags -->
                <div class="bg-white rounded-lg shadow p-6 space-y-4">
                    <h3 class="text-lg font-medium text-gray-900">Tags & Hashtags</h3>
                    <div class="space-y-4">
                        <div>
                            <label for="tags" class="block text-sm font-medium text-gray-700">Tags</label>
                            <input type="text" id="tags" name="tags" value="<%= content.tags.join(', ') %>"
                                class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                            <div id="tagsList" class="mt-2 flex flex-wrap gap-2"></div>
                        </div>
                        <div>
                            <label for="hashtags" class="block text-sm font-medium text-gray-700">Hashtags</label>
                            <div class="mt-1 flex rounded-lg shadow-sm">
                                <span
                                    class="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                                    #
                                </span>
                                <input type="text" id="hashtags" name="hashtags"
                                    value="<%= content.hashtags.join(', ') %>"
                                    class="flex-1 block w-full rounded-none rounded-r-lg border-gray-300 focus:border-indigo-500 focus:ring-indigo-500">
                            </div>
                            <div id="hashtagsList" class="mt-2 flex flex-wrap gap-2"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="space-y-6">
                <!-- Thumbnail -->
                <div class="bg-white rounded-lg shadow p-6 space-y-4">
                    <h3 class="text-lg font-medium text-gray-900">Thumbnail</h3>
                    <div class="flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg">
                        <div class="space-y-1 text-center">
                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none"
                                viewBox="0 0 48 48">
                                <path
                                    d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4-4m4-4h8m-4-4v8m-12 4h.02"
                                    stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                            <div class="flex text-sm text-gray-600">
                                <label for="thumbnail"
                                    class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500">
                                    <span>Change thumbnail</span>
                                    <input id="thumbnail" name="thumbnail" type="file" accept="image/*" class="sr-only">
                                </label>
                            </div>
                            <p class="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
                        </div>
                    </div>
                    <div id="thumbnailPreview">
                        <img id="thumbnailImage" src="<%= content.thumbnail_path || '/images/default-thumbnail.jpg' %>"
                            class="w-full h-48 object-cover rounded-lg" alt="Thumbnail preview">
                    </div>
                </div>

                <!-- Multi-Trim Editor -->
                <div class="bg-white rounded-lg shadow p-6 space-y-4">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-medium text-gray-900">Multi-Trim Editor</h3>
                        <button type="button" onclick="addTrimSegment()"
                            class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <svg class="mr-1.5 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M12 4v16m8-8H4" />
                            </svg>
                            Add Segment
                        </button>
                    </div>
                    <div id="trimContainer" class="space-y-4">
                        <!-- Trim segments will be added here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Submit Button -->
        <div class="flex justify-end pt-6">
            <button type="submit"
                class="px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 font-medium">
                Update Content
            </button>
        </div>
    </form>
</div>

<script>
    // Initialize variables
    let trimSegments = JSON.parse('<%- JSON.stringify(content.trim_data) %>');
    let videoPlayer = document.getElementById('previewPlayer');
    let currentSegment = null;

    // Initialize video metadata
    videoPlayer.onloadedmetadata = function () {
        const duration = videoPlayer.duration;
        const minutes = Math.floor(duration / 60);
        const seconds = Math.floor(duration % 60);
        document.getElementById('videoDuration').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        document.getElementById('videoResolution').textContent = `${this.videoWidth}x${this.videoHeight}`;
    };

    // Video preview and metadata extraction
    document.getElementById('video').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const previewPlayer = document.getElementById('previewPlayer');
            previewPlayer.src = URL.createObjectURL(file);
            videoPlayer = previewPlayer;

            // Get video metadata once loaded
            previewPlayer.onloadedmetadata = function () {
                const duration = previewPlayer.duration;
                const minutes = Math.floor(duration / 60);
                const seconds = Math.floor(duration % 60);
                document.getElementById('videoDuration').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                document.getElementById('videoResolution').textContent = `${this.videoWidth}x${this.videoHeight}`;
            };
        }
    });

    // Thumbnail preview
    document.getElementById('thumbnail').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const thumbnailImage = document.getElementById('thumbnailImage');
            thumbnailImage.src = URL.createObjectURL(file);
        }
    });

    // Initialize tags and hashtags
    updateTagsList(document.getElementById('tags').value.split(',').map(tag => tag.trim()).filter(tag => tag));
    updateHashtagsList(document.getElementById('hashtags').value.split(',').map(tag => tag.trim()).filter(tag => tag));

    // Tags handling with improved UI
    document.getElementById('tags').addEventListener('input', function (e) {
        const tags = e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag);
        updateTagsList(tags);
    });

    function updateTagsList(tags) {
        const tagsList = document.getElementById('tagsList');
        tagsList.innerHTML = tags.map(tag => `
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            ${tag}
            <button type="button" onclick="removeTag('${tag}')" class="ml-1.5 text-blue-400 hover:text-blue-600">
                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </span>
    `).join('');
    }

    function removeTag(tag) {
        const tagsInput = document.getElementById('tags');
        const tags = tagsInput.value.split(',').map(t => t.trim());
        tagsInput.value = tags.filter(t => t !== tag).join(', ');
        updateTagsList(tags.filter(t => t !== tag));
    }

    // Hashtags handling with improved UI
    document.getElementById('hashtags').addEventListener('input', function (e) {
        const hashtags = e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag);
        updateHashtagsList(hashtags);
    });

    function updateHashtagsList(hashtags) {
        const hashtagsList = document.getElementById('hashtagsList');
        hashtagsList.innerHTML = hashtags.map(tag => `
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            #${tag}
            <button type="button" onclick="removeHashtag('${tag}')" class="ml-1.5 text-green-400 hover:text-green-600">
                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </span>
    `).join('');
    }

    function removeHashtag(tag) {
        const hashtagsInput = document.getElementById('hashtags');
        const hashtags = hashtagsInput.value.split(',').map(t => t.trim());
        hashtagsInput.value = hashtags.filter(t => t !== tag).join(', ');
        updateHashtagsList(hashtags.filter(t => t !== tag));
    }

    // Multi-trim editor with improved UI and time selection
    function addTrimSegment() {
        if (!videoPlayer || !videoPlayer.duration) {
            showError('Please upload a video first');
            return;
        }

        const segment = {
            id: Date.now(),
            start: 0,
            end: videoPlayer.duration
        };
        trimSegments.push(segment);
        renderTrimSegments();
    }

    function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        const ms = Math.floor((seconds % 1) * 100);
        return `${mins}:${secs.toString().padStart(2, '0')}.${ms.toString().padStart(2, '0')}`;
    }

    function renderTrimSegments() {
        const container = document.getElementById('trimContainer');
        container.innerHTML = trimSegments.map((segment, index) => `
        <div class="bg-gray-50 p-4 rounded-lg" data-segment-id="${segment.id}">
            <div class="flex justify-between items-center mb-4">
                <h4 class="text-sm font-medium text-gray-900">Segment ${index + 1}</h4>
                <div class="flex items-center space-x-2">
                    <button type="button" onclick="previewSegment(${segment.id})"
                        class="text-sm text-indigo-600 hover:text-indigo-900">
                        Preview
                    </button>
                    <button type="button" onclick="removeTrimSegment(${segment.id})"
                        class="text-sm text-red-600 hover:text-red-900">
                        Remove
                    </button>
                </div>
            </div>
            <div class="space-y-4">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Start Time</label>
                        <div class="mt-1 relative">
                            <input type="range" min="0" max="${videoPlayer.duration}" step="0.1"
                                value="${segment.start}"
                                onchange="updateTrimSegment(${segment.id}, 'start', this.value)"
                                oninput="updateTimeDisplay(${segment.id}, 'start', this.value)"
                                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                            <span id="startTime_${segment.id}" class="block text-sm text-gray-500 mt-1">
                                ${formatTime(segment.start)}
                            </span>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">End Time</label>
                        <div class="mt-1 relative">
                            <input type="range" min="${segment.start}" max="${videoPlayer.duration}" step="0.1"
                                value="${segment.end}"
                                onchange="updateTrimSegment(${segment.id}, 'end', this.value)"
                                oninput="updateTimeDisplay(${segment.id}, 'end', this.value)"
                                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                            <span id="endTime_${segment.id}" class="block text-sm text-gray-500 mt-1">
                                ${formatTime(segment.end)}
                            </span>
                        </div>
                    </div>
                </div>
                <div class="relative pt-1">
                    <div class="flex mb-2 items-center justify-between">
                        <div class="text-xs text-gray-500">Duration: ${formatTime(segment.end - segment.start)}</div>
                    </div>
                    <div class="overflow-hidden h-2 text-xs flex rounded bg-gray-200">
                        <div style="width: ${(segment.end - segment.start) / videoPlayer.duration * 100}%"
                            class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-indigo-500">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
    }

    function updateTimeDisplay(segmentId, field, value) {
        document.getElementById(`${field}Time_${segmentId}`).textContent = formatTime(parseFloat(value));
    }

    function updateTrimSegment(id, field, value) {
        const segment = trimSegments.find(s => s.id === id);
        if (segment) {
            segment[field] = parseFloat(value);
            if (field === 'start' && segment.start > segment.end) {
                segment.end = segment.start;
            }
            renderTrimSegments();
        }
    }

    function previewSegment(id) {
        const segment = trimSegments.find(s => s.id === id);
        if (segment && videoPlayer) {
            videoPlayer.currentTime = segment.start;
            videoPlayer.play();

            if (currentSegment) {
                clearTimeout(currentSegment);
            }

            currentSegment = setTimeout(() => {
                videoPlayer.pause();
                currentSegment = null;
            }, (segment.end - segment.start) * 1000);
        }
    }

    function removeTrimSegment(id) {
        trimSegments = trimSegments.filter(segment => segment.id !== id);
        renderTrimSegments();
    }

    // Initialize trim segments
    renderTrimSegments();

    // Form submission with improved error handling
    document.getElementById('contentForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(this);

        // Add tags and hashtags as JSON strings
        formData.set('tags', JSON.stringify(document.getElementById('tags').value.split(',').map(tag => tag.trim()).filter(tag => tag)));
        formData.set('hashtags', JSON.stringify(document.getElementById('hashtags').value.split(',').map(tag => tag.trim()).filter(tag => tag)));

        // Add trim data
        formData.set('trimData', JSON.stringify(trimSegments));

        try {
            const response = await fetch('/content_collection/<%= content.id %>', {
                method: 'PUT',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                window.location.href = '/content_collection';
            } else {
                throw new Error(result.message || 'Failed to update content');
            }
        } catch (error) {
            showError(error.message);
        }
    });

    function showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in';
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 3000);
    }
</script>

<style>
    .animate-fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-1rem);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Custom range input styling */
    input[type="range"] {
        -webkit-appearance: none;
        height: 8px;
        background: #e5e7eb;
        border-radius: 5px;
        background-image: linear-gradient(#4f46e5, #4f46e5);
        background-repeat: no-repeat;
    }

    input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        height: 16px;
        width: 16px;
        border-radius: 50%;
        background: #4f46e5;
        cursor: pointer;
        box-shadow: 0 0 2px 0 #555;
        transition: background .3s ease-in-out;
    }

    input[type="range"]::-webkit-slider-thumb:hover {
        background: #4338ca;
    }

    input[type="range"]::-webkit-slider-thumb:active {
        transform: scale(1.2);
    }
</style>