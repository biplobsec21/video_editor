<style>
    .video-item {
        transition: all 0.3s ease;
    }

    .video-item:hover {
        transform: translateY(-2px);
    }

    .video-item.selected {
        border: 2px solid #FCD34D;
        background-color: #FEF3C7;
    }

    @keyframes fade-in {
        from {
            opacity: 0;
            transform: translateY(-1rem);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .animate-fade-in {
        animation: fade-in 0.3s ease-out;
    }
</style>

<div class="p-4 w-full">
    <div class="flex gap-6">
        <!-- Left Sidebar - Media Library -->
        <div class="w-1/5 space-y-6">
            <!-- Page Selection Card -->
            <div class="bg-white rounded-lg shadow-lg p-4">
                <h2 class="text-xl font-semibold mb-4 text-gray-800">Media Library</h2>
                <div class="mb-6">
                    <label for="pageSelect" class="block text-sm font-medium text-gray-700 mb-2">Select Page</label>
                    <select id="pageSelect"
                        class="w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        <option value="">Select a page</option>
                        <% pages.forEach(page=> { %>
                            <option value="<%= page.id %>" <%=selectedPageId==page.id ? 'selected' : '' %>>
                                <%= page.pageName %>
                            </option>
                            <% }) %>
                    </select>
                </div>

                <!-- Original Videos -->
                <div class="mb-6">
                    <h3 class="text-lg font-semibold mb-3 text-gray-700">Original Videos</h3>
                    <div id="videoLibrary" class="space-y-3 max-h-[300px] overflow-y-auto pr-2">
                        <% videos.forEach(video=> { %>
                            <div class="flex items-center p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 video-item"
                                data-video-id="<%= video.id %>" data-file="<%= video.downloadedFile %>">
                                <img src="/<%= video.thumbnail %>" alt="Thumbnail"
                                    class="w-16 h-16 object-cover rounded-lg shadow-sm">
                                <div class="ml-3 flex-1">
                                    <p class="text-sm font-medium text-gray-800">
                                        <%= video.title || 'No Title' %>
                                    </p>
                                    <p class="text-xs text-gray-500">Original</p>
                                </div>
                            </div>
                            <% }) %>
                    </div>
                </div>

                <!-- Edited Videos -->
                <div>
                    <h3 class="text-lg font-semibold mb-3 text-gray-700">Edited Videos</h3>
                    <div id="editedVideos" class="space-y-3 max-h-[300px] overflow-y-auto pr-2">
                        <% editedVideos.forEach(video=> { %>
                            <div class="flex items-center p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 video-item"
                                data-video-id="<%= video.video_id %>" data-file="<%= video.edited_file %>"
                                data-is-edited="true">
                                ${video.thumbnail ? `
                                <img src="/${video.thumbnail}" alt="Thumbnail"
                                    class="w-16 h-16 object-cover rounded-lg shadow-sm">
                                ` : `
                                <div
                                    class="w-16 h-16 bg-gray-200 rounded-lg shadow-sm flex items-center justify-center">
                                    <svg class="w-8 h-8 text-gray-500" fill="none" stroke="currentColor"
                                        viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                    </svg>
                                </div>
                                `}
                                <div class="ml-3 flex-1">
                                    <div class="flex justify-between items-start">
                                        <p class="text-sm font-medium text-gray-800">
                                            ${video.edited_file.split('/').pop()}</p>
                                    </div>
                                    <p class="text-xs text-gray-500">${new Date(video.created_at).toLocaleString()}</p>
                                </div>
                            </div>
                            <% }) %>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Editor Area -->
        <div class="w-4/5 bg-white rounded-lg shadow-lg" id="editorPanel">
            <div class="text-center py-20">
                <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
                <p class="text-gray-500 text-lg">Select a video from the library to start editing</p>
            </div>
        </div>
    </div>
</div>

<!-- Add audio preview script -->
<script>
    // Check if Web Audio API is supported
    if (window.AudioContext || window.webkitAudioContext) {
        console.log('Web Audio API is supported');
    } else {
        console.warn('Web Audio API is not supported in this browser');
    }
</script>
<script src="/js/audioPreview.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Debug logging for audio preview initialization
        console.log('DOM Content Loaded');
        const videoPlayer = document.getElementById('videoPlayer');
        if (videoPlayer) {
            console.log('Video player found:', videoPlayer);
            try {
                window.audioPreview = new AudioPreview(videoPlayer);
                console.log('Audio preview initialized successfully');
            } catch (error) {
                console.error('Error initializing audio preview:', error);
            }
        } else {
            console.error('Video player element not found');
        }
        const pageSelect = document.getElementById('pageSelect');
        const videoLibrary = document.getElementById('videoLibrary');
        const editedVideos = document.getElementById('editedVideos');
        const editorPanel = document.getElementById('editorPanel');

        console.log('Editor initialized');

        // Initialize editor panel event listeners
        function initializeEditorPanel() {
            const form = document.getElementById('editForm');
            const videoPlayer = document.getElementById('videoPlayer');
            const videoDuration = document.getElementById('videoDuration');
            const currentTime = document.getElementById('currentTime');
            const submitButton = document.getElementById('submitButton');
            const progressOverlay = document.getElementById('progressOverlay');
            const progressBar = document.getElementById('progressBar');
            const progressPercentage = document.getElementById('progressPercentage');
            const progressMessage = document.getElementById('progressMessage');
            const progressDetail = document.getElementById('progressDetail');
            const progressStatus = document.getElementById('progressStatus');
            const setTrimStartBtn = document.getElementById('setTrimStartBtn');
            const setTrimEndBtn = document.getElementById('setTrimEndBtn');
            const setTextStartBtn = document.getElementById('setTextStartBtn');
            const setTextEndBtn = document.getElementById('setTextEndBtn');
            const setZoomStartBtn = document.getElementById('setZoomStartBtn');
            const audioEffectType = document.getElementById('audioEffectType');
            let processingStartTime;

            // Audio Effects Controls
            const audioControlSections = [
                'audioNormalizeControls',
                'audioFadeControls',
                'equalizerControls',
                'reverbControls',
                'compressionControls',
                'noiseReductionControls',
                'pitchControls',
                'tempoControls'
            ];

            // Handle audio effect type changes
            if (audioEffectType) {
                audioEffectType.addEventListener('change', function () {
                    // Hide all control sections
                    audioControlSections.forEach(sectionId => {
                        const section = document.getElementById(sectionId);
                        if (section) {
                            section.classList.add('hidden');
                        }
                    });

                    // Show selected effect controls
                    const selectedEffect = this.value;
                    if (selectedEffect) {
                        const controlSection = document.getElementById(selectedEffect + 'Controls');
                        if (controlSection) {
                            controlSection.classList.remove('hidden');
                        }
                    }
                });
            }

            // Initialize range input value displays
            const rangeInputs = ['eqLow', 'eqMid', 'eqHigh', 'reverbMix', 'nrStrength'];
            rangeInputs.forEach(inputId => {
                const input = document.getElementById(inputId);
                const valueDisplay = document.getElementById(inputId + 'Value');
                if (input && valueDisplay) {
                    input.addEventListener('input', function () {
                        let displayValue = this.value;
                        if (inputId.startsWith('eq')) {
                            displayValue += ' dB';
                        } else if (inputId === 'reverbMix' || inputId === 'nrStrength') {
                            displayValue += '%';
                        }
                        valueDisplay.textContent = displayValue;
                    });
                }
            });

            // Form submission handler
            if (form) {
                const originalSubmitHandler = form.onsubmit;
                form.onsubmit = async function (e) {
                    e.preventDefault();

                    const formData = new FormData(form);
                    const data = {};

                    // Add audio effect parameters
                    const audioEffect = audioEffectType?.value;
                    if (audioEffect) {
                        data.audioEffect = {
                            type: audioEffect,
                            params: {}
                        };

                        switch (audioEffect) {
                            case 'normalize':
                                data.audioEffect.params.level = document.getElementById('normalizeLevel')?.value;
                                break;
                            case 'fadeInOut':
                                data.audioEffect.params.fadeIn = document.getElementById('fadeInDuration')?.value;
                                data.audioEffect.params.fadeOut = document.getElementById('fadeOutDuration')?.value;
                                break;
                            case 'equalizer':
                                data.audioEffect.params.low = document.getElementById('eqLow')?.value;
                                data.audioEffect.params.mid = document.getElementById('eqMid')?.value;
                                data.audioEffect.params.high = document.getElementById('eqHigh')?.value;
                                break;
                            case 'reverb':
                                data.audioEffect.params.mix = document.getElementById('reverbMix')?.value;
                                data.audioEffect.params.room = document.getElementById('reverbRoom')?.value;
                                break;
                            case 'compression':
                                data.audioEffect.params.threshold = document.getElementById('compThreshold')?.value;
                                data.audioEffect.params.ratio = document.getElementById('compRatio')?.value;
                                break;
                            case 'noise_reduction':
                                data.audioEffect.params.strength = document.getElementById('nrStrength')?.value;
                                break;
                            case 'pitch':
                                data.audioEffect.params.shift = document.getElementById('pitchShift')?.value;
                                break;
                            case 'tempo':
                                data.audioEffect.params.factor = document.getElementById('tempoFactor')?.value;
                                break;
                        }
                    }

                    // Merge with existing form data
                    formData.forEach((value, key) => {
                        if (!key.startsWith('audio')) {
                            data[key] = value;
                        }
                    });

                    // Process form submission
                    try {
                        // Disable submit button and show progress
                        if (submitButton) {
                            submitButton.disabled = true;
                            submitButton.innerHTML = `
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Processing...
                            `;
                        }

                        showProgress(true);
                        updateProgress(0, 'Starting process...', 'Preparing your video');
                        startProgressSimulation();

                        // Send AJAX request
                        const response = await fetch('/video_editor/process', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data)
                        });

                        console.log('Response status:', response.status);
                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`HTTP error: ${response.status} - ${errorText}`);
                        }

                        const result = await response.json();
                        console.log('Response result:', result);

                        if (result.success) {
                            // Show completion
                            updateProgress(100, 'Processing complete!', 'Your video has been processed successfully.');

                            // Update video player source to show the newly edited video
                            const videoPlayer = document.getElementById('videoPlayer');
                            if (videoPlayer) {
                                videoPlayer.src = `/${result.editedFile}`;
                                videoPlayer.load(); // Reload the video with new source
                            }

                            // Update hidden input for source file
                            const sourceFileInput = document.querySelector('input[name="sourceFile"]');
                            if (sourceFileInput) {
                                sourceFileInput.value = result.editedFile;
                            }

                            // Update video ID
                            const videoIdInput = document.querySelector('input[name="videoId"]');
                            if (videoIdInput) {
                                videoIdInput.value = result.videoId;
                            }

                            // Reset form values
                            document.getElementById('trimStart').value = '';
                            document.getElementById('trimEnd').value = '';
                            document.getElementById('cropWidth').value = '';
                            document.getElementById('cropHeight').value = '';
                            document.getElementById('cropX').value = '';
                            document.getElementById('cropY').value = '';

                            // Show success message
                            const successMessage = document.createElement('div');
                            successMessage.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in';
                            successMessage.textContent = 'Video processed successfully!';
                            document.body.appendChild(successMessage);
                            setTimeout(() => successMessage.remove(), 3000);

                            // Hide progress overlay after a short delay
                            setTimeout(() => {
                                showProgress(false);
                            }, 1000);

                            // Refresh the edited videos list
                            if (pageSelect.value) {
                                fetch(`/video_editor/videos/${pageSelect.value}`)
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success && editedVideos) {
                                            // Update edited videos list
                                            editedVideos.innerHTML = data.editedVideos.map(video => `
                                                <div class="flex items-center p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 video-item"
                                                    data-video-id="${video.video_id}"
                                                    data-file="${video.edited_file}"
                                                    data-is-edited="true">
                                                    ${video.thumbnail ? `
                                                        <img src="/${video.thumbnail}" alt="Thumbnail" 
                                                            class="w-16 h-16 object-cover rounded-lg shadow-sm">
                                                    ` : `
                                                        <div class="w-16 h-16 bg-gray-200 rounded-lg shadow-sm flex items-center justify-center">
                                                            <svg class="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                                    d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                                            </svg>
                                                        </div>
                                                    `}
                                                    <div class="ml-3 flex-1">
                                                        <p class="text-sm font-medium text-gray-800">${video.edited_file.split('/').pop()}</p>
                                                        <p class="text-xs text-gray-500">${new Date(video.created_at).toLocaleString()}</p>
                                                    </div>
                                                </div>
                                            `).join('');

                                            // Reattach click handlers
                                            document.querySelectorAll('.video-item').forEach(item => {
                                                item.addEventListener('click', () => handleVideoSelection(item));
                                            });

                                            // Select the newly added video
                                            const newVideo = document.querySelector(`[data-file="${result.editedFile}"]`);
                                            if (newVideo) {
                                                newVideo.classList.add('selected');
                                            }
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error refreshing videos:', error);
                                    });
                            }
                        } else {
                            throw new Error(result.error || 'Failed to process video');
                        }
                    } catch (error) {
                        console.error('Submission error:', error);
                        updateProgress(0, 'Error occurred', error.message);

                        // Show error message
                        const errorMessage = document.createElement('div');
                        errorMessage.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in';
                        errorMessage.textContent = `Error: ${error.message}`;
                        document.body.appendChild(errorMessage);
                        setTimeout(() => errorMessage.remove(), 5000);
                    } finally {
                        // Reset submit button and hide progress
                        if (submitButton) {
                            submitButton.disabled = false;
                            submitButton.innerHTML = `
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                                </svg>
                                Apply Changes
                            `;
                        }
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        showProgress(false);
                    }
                };
            }

            // Initialize collapsible sections
            function toggleSection(sectionId) {
                const section = document.getElementById(sectionId);
                const icon = document.getElementById(sectionId + 'Icon');
                if (!section || !icon) {
                    console.error('Section or icon not found:', sectionId);
                    return;
                }

                console.log('Toggling section:', sectionId);

                const isExpanded = section.style.maxHeight !== '0px' && section.style.maxHeight !== '';
                console.log('Current state:', { isExpanded, currentMaxHeight: section.style.maxHeight });

                // Toggle the section
                if (isExpanded) {
                    // Collapse
                    section.style.maxHeight = '0px';
                    icon.style.transform = 'rotate(0deg)';
                    console.log('Collapsing section');
                } else {
                    // Expand
                    const content = section.querySelector('.audio-effects-content, .effect-controls-container');
                    if (content) {
                        // For sections with nested content, calculate total height including all visible elements
                        let totalHeight = content.scrollHeight;

                        // If this is the audio effects section, include the preview controls height
                        if (sectionId === 'audioEffectsControls') {
                            const previewControls = section.querySelector('.preview-controls');
                            if (previewControls) {
                                totalHeight += previewControls.scrollHeight;
                            }

                            // Include visible effect controls
                            const visibleEffectControls = content.querySelector('.effect-controls-container > div:not(.hidden)');
                            if (visibleEffectControls) {
                                totalHeight += visibleEffectControls.scrollHeight;
                            }
                        }

                        section.style.maxHeight = `${totalHeight}px`;
                        console.log('Expanding section with content, height:', totalHeight);
                    } else {
                        // For simple sections
                        section.style.maxHeight = `${section.scrollHeight}px`;
                        console.log('Expanding simple section, height:', section.scrollHeight);
                    }
                    icon.style.transform = 'rotate(180deg)';
                }
            }

            // Add click handlers for collapsible sections
            document.querySelectorAll('[onclick^="toggleSection"]').forEach(header => {
                const sectionId = header.getAttribute('onclick').match(/'([^']+)'/)[1];
                header.onclick = (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    toggleSection(sectionId);
                };
            });

            // Initialize sections in collapsed state
            function initializeSections() {
                ['trimControls', 'cropControls', 'textOverlayControls', 'audioEffectsControls', 'effectsControls'].forEach(sectionId => {
                    const section = document.getElementById(sectionId);
                    if (section) {
                        section.style.maxHeight = '0px';
                        console.log('Initializing section:', sectionId);
                    }
                });
            }

            // Call initialization after DOM is loaded
            document.addEventListener('DOMContentLoaded', () => {
                initializeSections();
                // Open Trim Controls by default after a short delay
                setTimeout(() => toggleSection('trimControls'), 100);
            });

            // Initialize effects controls
            const effectType = document.getElementById('effectType');
            const chromaKeyControls = document.getElementById('chromaKeyControls');
            const zoomControls = document.getElementById('zoomControls');

            // Handle effect type changes
            if (effectType) {
                effectType.addEventListener('change', function () {
                    if (chromaKeyControls) {
                        chromaKeyControls.classList.toggle('hidden', this.value !== 'chromaKey');
                    }
                    if (zoomControls) {
                        zoomControls.classList.toggle('hidden', this.value !== 'zoom');
                    }
                });
            }

            // Handle zoom start time button
            if (setZoomStartBtn && videoPlayer) {
                setZoomStartBtn.addEventListener('click', function () {
                    const zoomStartInput = document.getElementById('zoomStartTime');
                    if (zoomStartInput) {
                        zoomStartInput.value = videoPlayer.currentTime.toFixed(1);
                    }
                });
            }

            // Function to collect effect parameters
            function getEffectParams() {
                const params = {
                    effectType: effectType?.value || ''
                };

                // Add chroma key parameters if that effect is selected
                if (params.effectType === 'chromaKey') {
                    params.keyColor = document.getElementById('keyColor')?.value || '#00FF00';
                    params.similarity = document.getElementById('similarity')?.value || 0.3;
                    params.blend = document.getElementById('blend')?.value || 0.1;
                }
                // Add zoom parameters if that effect is selected
                else if (params.effectType === 'zoom') {
                    params.zoomStartTime = parseFloat(document.getElementById('zoomStartTime')?.value || 0);
                    params.zoomDuration = parseFloat(document.getElementById('zoomDuration')?.value || 2);
                    params.zoomScale = parseFloat(document.getElementById('zoomScale')?.value || 1.5);
                    params.zoomDirection = document.getElementById('zoomDirection')?.value || 'in';
                    params.zoomCenter = document.getElementById('zoomCenter')?.value || 'center';
                }

                return params;
            }

            // Update maxHeight when content changes (for text overlay advanced mode)
            const advancedModeToggle = document.getElementById('advancedMode');
            if (advancedModeToggle) {
                advancedModeToggle.addEventListener('change', function () {
                    const textOverlayControls = document.getElementById('textOverlayControls');
                    if (textOverlayControls && textOverlayControls.style.maxHeight !== '0px') {
                        textOverlayControls.style.maxHeight = textOverlayControls.scrollHeight + 'px';
                    }
                });
            }

            // Show/hide progress overlay
            function showProgress(show = true) {
                if (progressOverlay) {
                    progressOverlay.style.display = show ? 'flex' : 'none';
                }
            }

            // Update progress bar
            function updateProgress(percent, message = null, detail = null) {
                if (progressBar && progressPercentage && progressStatus) {
                    progressBar.style.width = `${percent}%`;
                    progressPercentage.textContent = `${Math.round(percent)}%`;

                    if (message) progressMessage.textContent = message;
                    if (detail) progressDetail.textContent = detail;

                    if (percent === 100) {
                        progressStatus.textContent = 'Complete';
                        progressStatus.classList.remove('bg-indigo-200', 'text-indigo-600');
                        progressStatus.classList.add('bg-green-200', 'text-green-600');
                    } else {
                        progressStatus.textContent = 'Processing';
                        progressStatus.classList.remove('bg-green-200', 'text-green-600');
                        progressStatus.classList.add('bg-indigo-200', 'text-indigo-600');
                    }
                }
            }

            // Simulate progress animation
            function startProgressSimulation() {
                processingStartTime = Date.now();
                let progress = 0;
                const simulateProgress = () => {
                    const elapsedTime = Date.now() - processingStartTime;
                    progress = Math.min((elapsedTime / 30000) * 100, 95); // Simulate up to 95%
                    updateProgress(
                        progress,
                        'Processing video...',
                        `Estimated time remaining: ${Math.max(Math.round((30000 - elapsedTime) / 1000), 0)} seconds`
                    );
                    if (progress < 95) {
                        requestAnimationFrame(simulateProgress);
                    }
                };
                simulateProgress();
            }

            // Validate trim inputs
            function validateTrimInputs() {
                const trimStart = parseFloat(document.getElementById('trimStart').value) || 0;
                const trimEnd = parseFloat(document.getElementById('trimEnd').value) || (videoPlayer ? videoPlayer.duration : 0);

                if (trimStart >= trimEnd) {
                    alert('Start time must be less than end time');
                    return false;
                }

                if (videoPlayer && (trimStart < 0 || trimEnd > videoPlayer.duration)) {
                    alert('Trim values must be within video duration');
                    return false;
                }

                return true;
            }

            // Text timing control functions
            if (setTextStartBtn) {
                setTextStartBtn.addEventListener('click', function () {
                    const textStartInput = document.getElementById('textStartTime');
                    if (textStartInput && videoPlayer) {
                        textStartInput.value = videoPlayer.currentTime.toFixed(1);
                    }
                });
            }

            if (setTextEndBtn) {
                setTextEndBtn.addEventListener('click', function () {
                    const textEndInput = document.getElementById('textEndTime');
                    if (textEndInput && videoPlayer) {
                        textEndInput.value = videoPlayer.currentTime.toFixed(1);
                    }
                });
            }

            // Validate text timing inputs
            function validateTextTiming() {
                const textStartTime = parseFloat(document.getElementById('textStartTime').value) || 0;
                const textEndTime = parseFloat(document.getElementById('textEndTime').value) || (videoPlayer ? videoPlayer.duration : 0);

                if (textStartTime >= textEndTime) {
                    alert('Text start time must be less than end time');
                    return false;
                }

                if (videoPlayer && (textStartTime < 0 || textEndTime > videoPlayer.duration)) {
                    alert('Text timing values must be within video duration');
                    return false;
                }

                return true;
            }

            // Update video duration and current time
            if (videoPlayer) {
                videoPlayer.addEventListener('loadedmetadata', function () {
                    const duration = videoPlayer.duration;
                    const minutes = Math.floor(duration / 60);
                    const seconds = Math.floor(duration % 60);
                    if (videoDuration) {
                        videoDuration.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    }

                    // Set max values for trim inputs
                    const trimEndInput = document.getElementById('trimEnd');
                    const trimStartInput = document.getElementById('trimStart');
                    if (trimEndInput) trimEndInput.max = duration;
                    if (trimStartInput) trimStartInput.max = duration;
                });

                videoPlayer.addEventListener('timeupdate', function () {
                    const time = videoPlayer.currentTime;
                    const minutes = Math.floor(time / 60);
                    const seconds = Math.floor(time % 60);
                    if (currentTime) {
                        currentTime.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    }
                });
            }

            // Trim control functions
            if (setTrimStartBtn) {
                setTrimStartBtn.addEventListener('click', function () {
                    const trimStartInput = document.getElementById('trimStart');
                    if (trimStartInput && videoPlayer) {
                        trimStartInput.value = videoPlayer.currentTime.toFixed(1);
                    }
                });
            }

            if (setTrimEndBtn) {
                setTrimEndBtn.addEventListener('click', function () {
                    const trimEndInput = document.getElementById('trimEnd');
                    if (trimEndInput && videoPlayer) {
                        trimEndInput.value = videoPlayer.currentTime.toFixed(1);
                    }
                });
            }

            // Text overlay management
            const textOverlaysContainer = document.getElementById('textOverlaysContainer');
            const textOverlayTemplate = document.getElementById('textOverlayTemplate');
            const addTextOverlayBtn = document.getElementById('addTextOverlay');
            const simpleModeDiv = document.getElementById('simpleMode');
            const advancedModeDiv = document.getElementById('advancedModeContainer');

            // Mode switching
            if (advancedModeToggle) {
                advancedModeToggle.addEventListener('change', function () {
                    const isAdvanced = this.checked;
                    simpleModeDiv.classList.toggle('hidden', isAdvanced);
                    advancedModeDiv.classList.toggle('hidden', !isAdvanced);
                    addTextOverlayBtn.classList.toggle('hidden', !isAdvanced);

                    // If switching to advanced mode, add initial text overlay if none exists
                    if (isAdvanced && textOverlaysContainer.children.length === 0) {
                        addTextOverlay();
                    }
                });
            }

            function addTextOverlay(overlayData = null) {
                const clone = document.importNode(textOverlayTemplate.content, true);
                const entry = clone.querySelector('.text-overlay-entry');

                // Add remove handler
                entry.querySelector('.remove-text-overlay').addEventListener('click', function () {
                    entry.remove();
                });

                // Add time set handlers
                entry.querySelector('.set-text-start').addEventListener('click', function () {
                    const startInput = this.parentElement.querySelector('input');
                    if (startInput && videoPlayer) {
                        startInput.value = videoPlayer.currentTime.toFixed(1);
                    }
                });

                entry.querySelector('.set-text-end').addEventListener('click', function () {
                    const endInput = this.parentElement.querySelector('input');
                    if (endInput && videoPlayer) {
                        endInput.value = videoPlayer.currentTime.toFixed(1);
                    }
                });

                // Populate with existing data if provided
                if (overlayData) {
                    entry.querySelector('input[name="textOverlays[][text]"]').value = overlayData.text || '';
                    entry.querySelector('input[name="textOverlays[][startTime]"]').value = overlayData.startTime || 0;
                    entry.querySelector('input[name="textOverlays[][endTime]"]').value = overlayData.endTime || '';
                    entry.querySelector('input[name="textOverlays[][x]"]').value = overlayData.x || 50;
                    entry.querySelector('input[name="textOverlays[][y]"]').value = overlayData.y || 50;
                    entry.querySelector('input[name="textOverlays[][fontSize]"]').value = overlayData.fontSize || 24;
                    entry.querySelector('input[name="textOverlays[][color]"]').value = overlayData.color || '#ffffff';
                    entry.querySelector('input[name="textOverlays[][bgColor]"]').value = overlayData.bgColor || '#000000';
                    entry.querySelector('input[name="textOverlays[][bgOpacity]"]').value = overlayData.bgOpacity || 50;
                }

                textOverlaysContainer.appendChild(clone);
            }

            // Add text overlay button handler
            if (addTextOverlayBtn) {
                addTextOverlayBtn.addEventListener('click', addTextOverlay);
            }

            // Validate text overlays timing
            function validateTextOverlays() {
                const entries = textOverlaysContainer.querySelectorAll('.text-overlay-entry');
                for (const entry of entries) {
                    const startTime = parseFloat(entry.querySelector('input[name="textOverlays[][startTime]"]').value) || 0;
                    const endTime = parseFloat(entry.querySelector('input[name="textOverlays[][endTime]"]').value) || (videoPlayer ? videoPlayer.duration : 0);
                    const text = entry.querySelector('input[name="textOverlays[][text]"]').value.trim();

                    if (!text) {
                        alert('Please enter text for all text overlays');
                        return false;
                    }

                    if (startTime >= endTime) {
                        alert('Text start time must be less than end time for all text overlays');
                        return false;
                    }

                    if (videoPlayer && (startTime < 0 || endTime > videoPlayer.duration)) {
                        alert('Text timing values must be within video duration for all text overlays');
                        return false;
                    }
                }
                return true;
            }

            // Keyboard shortcuts
            document.addEventListener('keydown', function (e) {
                if (document.activeElement.tagName === 'INPUT') return;

                switch (e.key) {
                    case ' ': // Space
                        e.preventDefault();
                        if (videoPlayer) {
                            if (videoPlayer.paused) videoPlayer.play();
                            else videoPlayer.pause();
                        }
                        break;
                    case 'ArrowLeft': // Left arrow
                        e.preventDefault();
                        if (videoPlayer) {
                            videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 5);
                        }
                        break;
                    case 'ArrowRight': // Right arrow
                        e.preventDefault();
                        if (videoPlayer) {
                            videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 5);
                        }
                        break;
                }
            });
        }

        // Handle video selection
        function handleVideoSelection(videoItem) {
            // Remove selected class from all videos
            document.querySelectorAll('.video-item').forEach(item => {
                item.classList.remove('selected');
            });

            // Add selected class to clicked video
            videoItem.classList.add('selected');

            // Load editor panel
            const videoId = videoItem.dataset.videoId;
            const pageId = pageSelect.value;
            const isEdited = videoItem.dataset.isEdited === 'true';
            const sourceFile = videoItem.dataset.file;

            console.log('Fetching editor panel for video:', videoId, 'isEdited:', isEdited);

            // Update URL to include both videoId and pageId
            fetch(`/video_editor/editorPanel/${videoId}?pageId=${pageId}&isEdited=${isEdited}&sourceFile=${encodeURIComponent(sourceFile)}`)
                .then(response => {
                    console.log('Editor panel fetch status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error: ${response.status}`);
                    }
                    return response.text();
                })
                .then(html => {
                    editorPanel.innerHTML = html;
                    console.log('Editor panel loaded');
                    initializeEditorPanel();

                    // Reset form when loading a new video
                    const form = document.getElementById('editForm');
                    if (form) {
                        form.reset();
                    }

                    // If this is an edited video and we want to edit it further,
                    // we'll use it as the source but create a new version
                    if (isEdited) {
                        const videoPlayer = document.getElementById('videoPlayer');
                        if (videoPlayer) {
                            videoPlayer.src = `/${sourceFile}`;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error loading editor panel:', error);
                    editorPanel.innerHTML = `
                        <div class="p-4 text-center">
                            <div class="text-red-500 mb-2">Error loading editor</div>
                            <div class="text-sm text-gray-600">${error.message}</div>
                        </div>`;
                });
        }

        // Function to load edit history for a video
        function loadEditHistory(videoId, pageId) {
            fetch(`/video_editor/editHistory/${videoId}?pageId=${pageId}`)
                .then(response => response.json())
                .then(editHistory => {
                    if (editHistory && editHistory.edit_params) {
                        // Populate form with historical edit data
                        populateEditForm(editHistory.edit_params);
                    }
                })
                .catch(error => {
                    console.error('Error loading edit history:', error);
                });
        }

        // Function to populate form with edit history
        function populateEditForm(editParams) {
            // Populate trim values
            if (editParams.trim) {
                document.getElementById('trimStart').value = editParams.trim.start || 0;
                document.getElementById('trimEnd').value = editParams.trim.end || '';
            }

            // Populate crop values
            if (editParams.crop) {
                document.getElementById('cropWidth').value = editParams.crop.width || '';
                document.getElementById('cropHeight').value = editParams.crop.height || '';
                document.getElementById('cropX').value = editParams.crop.x || '';
                document.getElementById('cropY').value = editParams.crop.y || '';
            }

            // Populate text overlays
            if (editParams.textOverlays && editParams.textOverlays.length > 0) {
                const advancedModeToggle = document.getElementById('advancedMode');
                if (editParams.textOverlays.length > 1) {
                    // Switch to advanced mode if multiple overlays
                    advancedModeToggle.checked = true;
                    advancedModeToggle.dispatchEvent(new Event('change'));

                    // Clear existing overlays
                    const container = document.getElementById('textOverlaysContainer');
                    container.innerHTML = '';

                    // Add each overlay
                    editParams.textOverlays.forEach(overlay => {
                        addTextOverlay(overlay);
                    });
                } else {
                    // Single overlay - use simple mode
                    const overlay = editParams.textOverlays[0];
                    document.getElementById('simpleText').value = overlay.text || '';
                    document.getElementById('simpleX').value = overlay.x || 50;
                    document.getElementById('simpleY').value = overlay.y || 50;
                    document.getElementById('simpleFontSize').value = overlay.fontSize || 24;
                    document.getElementById('simpleColor').value = overlay.color || '#ffffff';
                    document.getElementById('simpleBgColor').value = overlay.bgColor || '#000000';
                    document.getElementById('simpleBgOpacity').value = overlay.bgOpacity || 50;
                }
            }
        }

        // Add click handlers to video items
        document.querySelectorAll('.video-item').forEach(item => {
            item.addEventListener('click', () => handleVideoSelection(item));
        });

        // Handle page selection
        pageSelect.addEventListener('change', async () => {
            const pageId = pageSelect.value;

            console.log('Page selected:', pageId);

            try {
                const response = await fetch(`/video_editor/videos/${pageId}`);
                const data = await response.json();

                console.log('Videos fetch status:', response.status, 'data:', data);

                if (data.success) {
                    // Update video library
                    videoLibrary.innerHTML = data.videos.map(video => `
                        <div class="flex items-center p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 video-item"
                             data-video-id="${video.id}"
                             data-file="${video.downloadedFile}">
                            <img src="/${video.thumbnail}" alt="Thumbnail" 
                                 class="w-16 h-16 object-cover rounded-lg shadow-sm">
                            <div class="ml-3 flex-1">
                                <p class="text-sm font-medium text-gray-800">${video.title || 'No Title'}</p>
                                <p class="text-xs text-gray-500">Original</p>
                            </div>
                        </div>
                    `).join('');

                    // Update edited videos
                    editedVideos.innerHTML = data.editedVideos.map(video => `
                        <div class="flex items-center p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 video-item"
                             data-video-id="${video.video_id}"
                             data-file="${video.edited_file}"
                             data-is-edited="true">
                            ${video.thumbnail ? `
                                <img src="/${video.thumbnail}" alt="Thumbnail" 
                                     class="w-16 h-16 object-cover rounded-lg shadow-sm">
                            ` : `
                                <div class="w-16 h-16 bg-gray-200 rounded-lg shadow-sm flex items-center justify-center">
                                    <svg class="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                              d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                    </svg>
                                </div>
                            `}
                            <div class="ml-3 flex-1">
                                <p class="text-sm font-medium text-gray-800">${video.edited_file.split('/').pop()}</p>
                                <p class="text-xs text-gray-500">${new Date(video.created_at).toLocaleString()}</p>
                            </div>
                        </div>
                    `).join('');

                    // Reset editor panel
                    editorPanel.innerHTML = `
                        <div class="text-center py-20">
                            <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                            <p class="text-gray-500 text-lg">Select a video from the library to start editing</p>
                        </div>
                    `;

                    // Reattach click handlers
                    document.querySelectorAll('.video-item').forEach(item => {
                        item.addEventListener('click', () => handleVideoSelection(item));
                    });
                } else {
                    throw new Error(data.error || 'Failed to load videos');
                }
            } catch (error) {
                console.error('Error loading videos:', error);
                videoLibrary.innerHTML = '<div class="text-red-500">Error loading videos</div>';
                editedVideos.innerHTML = '';
            }
        });
    });
</script>